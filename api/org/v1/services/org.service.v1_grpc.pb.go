// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/org/v1/services/org.service.v1.proto

package orgservicev1

import (
	context "context"
	resources "github.com/ikaiguang/go-srv-user/api/org/v1/resources"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SrvOrgClient is the client API for SrvOrg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SrvOrgClient interface {
	// GetById get by id
	GetById(ctx context.Context, in *resources.OrgIdReq, opts ...grpc.CallOption) (*resources.Org, error)
	// List list
	List(ctx context.Context, in *resources.OrgListReq, opts ...grpc.CallOption) (*resources.OrgListResp, error)
	// Create create
	Create(ctx context.Context, in *resources.OrgSaveReq, opts ...grpc.CallOption) (*resources.Org, error)
	// Update update
	Update(ctx context.Context, in *resources.OrgSaveReq, opts ...grpc.CallOption) (*resources.Org, error)
	// Delete delete
	Delete(ctx context.Context, in *resources.OrgIdReq, opts ...grpc.CallOption) (*resources.OrgProcessResult, error)
	// Destroy destroy
	Destroy(ctx context.Context, in *resources.OrgIdsReq, opts ...grpc.CallOption) (*resources.OrgProcessResult, error)
}

type srvOrgClient struct {
	cc grpc.ClientConnInterface
}

func NewSrvOrgClient(cc grpc.ClientConnInterface) SrvOrgClient {
	return &srvOrgClient{cc}
}

func (c *srvOrgClient) GetById(ctx context.Context, in *resources.OrgIdReq, opts ...grpc.CallOption) (*resources.Org, error) {
	out := new(resources.Org)
	err := c.cc.Invoke(ctx, "/user.api.org.orgservicev1.SrvOrg/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgClient) List(ctx context.Context, in *resources.OrgListReq, opts ...grpc.CallOption) (*resources.OrgListResp, error) {
	out := new(resources.OrgListResp)
	err := c.cc.Invoke(ctx, "/user.api.org.orgservicev1.SrvOrg/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgClient) Create(ctx context.Context, in *resources.OrgSaveReq, opts ...grpc.CallOption) (*resources.Org, error) {
	out := new(resources.Org)
	err := c.cc.Invoke(ctx, "/user.api.org.orgservicev1.SrvOrg/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgClient) Update(ctx context.Context, in *resources.OrgSaveReq, opts ...grpc.CallOption) (*resources.Org, error) {
	out := new(resources.Org)
	err := c.cc.Invoke(ctx, "/user.api.org.orgservicev1.SrvOrg/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgClient) Delete(ctx context.Context, in *resources.OrgIdReq, opts ...grpc.CallOption) (*resources.OrgProcessResult, error) {
	out := new(resources.OrgProcessResult)
	err := c.cc.Invoke(ctx, "/user.api.org.orgservicev1.SrvOrg/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvOrgClient) Destroy(ctx context.Context, in *resources.OrgIdsReq, opts ...grpc.CallOption) (*resources.OrgProcessResult, error) {
	out := new(resources.OrgProcessResult)
	err := c.cc.Invoke(ctx, "/user.api.org.orgservicev1.SrvOrg/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SrvOrgServer is the server API for SrvOrg service.
// All implementations must embed UnimplementedSrvOrgServer
// for forward compatibility
type SrvOrgServer interface {
	// GetById get by id
	GetById(context.Context, *resources.OrgIdReq) (*resources.Org, error)
	// List list
	List(context.Context, *resources.OrgListReq) (*resources.OrgListResp, error)
	// Create create
	Create(context.Context, *resources.OrgSaveReq) (*resources.Org, error)
	// Update update
	Update(context.Context, *resources.OrgSaveReq) (*resources.Org, error)
	// Delete delete
	Delete(context.Context, *resources.OrgIdReq) (*resources.OrgProcessResult, error)
	// Destroy destroy
	Destroy(context.Context, *resources.OrgIdsReq) (*resources.OrgProcessResult, error)
	mustEmbedUnimplementedSrvOrgServer()
}

// UnimplementedSrvOrgServer must be embedded to have forward compatible implementations.
type UnimplementedSrvOrgServer struct {
}

func (UnimplementedSrvOrgServer) GetById(context.Context, *resources.OrgIdReq) (*resources.Org, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedSrvOrgServer) List(context.Context, *resources.OrgListReq) (*resources.OrgListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSrvOrgServer) Create(context.Context, *resources.OrgSaveReq) (*resources.Org, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSrvOrgServer) Update(context.Context, *resources.OrgSaveReq) (*resources.Org, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSrvOrgServer) Delete(context.Context, *resources.OrgIdReq) (*resources.OrgProcessResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSrvOrgServer) Destroy(context.Context, *resources.OrgIdsReq) (*resources.OrgProcessResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedSrvOrgServer) mustEmbedUnimplementedSrvOrgServer() {}

// UnsafeSrvOrgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SrvOrgServer will
// result in compilation errors.
type UnsafeSrvOrgServer interface {
	mustEmbedUnimplementedSrvOrgServer()
}

func RegisterSrvOrgServer(s grpc.ServiceRegistrar, srv SrvOrgServer) {
	s.RegisterService(&SrvOrg_ServiceDesc, srv)
}

func _SrvOrg_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.OrgIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.api.org.orgservicev1.SrvOrg/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgServer).GetById(ctx, req.(*resources.OrgIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrg_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.OrgListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.api.org.orgservicev1.SrvOrg/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgServer).List(ctx, req.(*resources.OrgListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrg_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.OrgSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.api.org.orgservicev1.SrvOrg/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgServer).Create(ctx, req.(*resources.OrgSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrg_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.OrgSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.api.org.orgservicev1.SrvOrg/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgServer).Update(ctx, req.(*resources.OrgSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrg_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.OrgIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.api.org.orgservicev1.SrvOrg/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgServer).Delete(ctx, req.(*resources.OrgIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvOrg_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.OrgIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvOrgServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.api.org.orgservicev1.SrvOrg/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvOrgServer).Destroy(ctx, req.(*resources.OrgIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SrvOrg_ServiceDesc is the grpc.ServiceDesc for SrvOrg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SrvOrg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.api.org.orgservicev1.SrvOrg",
	HandlerType: (*SrvOrgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetById",
			Handler:    _SrvOrg_GetById_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SrvOrg_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SrvOrg_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SrvOrg_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SrvOrg_Delete_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _SrvOrg_Destroy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/org/v1/services/org.service.v1.proto",
}
