// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.3.1

package orgservicev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	resources "github.com/ikaiguang/go-srv-user/api/org/v1/resources"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSrvOrgCreate = "/user.api.org.orgservicev1.SrvOrg/Create"
const OperationSrvOrgDelete = "/user.api.org.orgservicev1.SrvOrg/Delete"
const OperationSrvOrgDestroy = "/user.api.org.orgservicev1.SrvOrg/Destroy"
const OperationSrvOrgGetById = "/user.api.org.orgservicev1.SrvOrg/GetById"
const OperationSrvOrgList = "/user.api.org.orgservicev1.SrvOrg/List"
const OperationSrvOrgUpdate = "/user.api.org.orgservicev1.SrvOrg/Update"

type SrvOrgHTTPServer interface {
	Create(context.Context, *resources.OrgSaveReq) (*resources.Org, error)
	Delete(context.Context, *resources.OrgIdReq) (*resources.OrgProcessResult, error)
	Destroy(context.Context, *resources.OrgIdsReq) (*resources.OrgProcessResult, error)
	GetById(context.Context, *resources.OrgIdReq) (*resources.Org, error)
	List(context.Context, *resources.OrgListReq) (*resources.OrgListResp, error)
	Update(context.Context, *resources.OrgSaveReq) (*resources.Org, error)
}

func RegisterSrvOrgHTTPServer(s *http.Server, srv SrvOrgHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/Org/GetById", _SrvOrg_GetById0_HTTP_Handler(srv))
	r.GET("/api/v1/Org/List", _SrvOrg_List0_HTTP_Handler(srv))
	r.POST("/api/v1/Org/Create", _SrvOrg_Create0_HTTP_Handler(srv))
	r.PUT("/api/v1/Org/Update", _SrvOrg_Update0_HTTP_Handler(srv))
	r.DELETE("/api/v1/Org/Delete", _SrvOrg_Delete0_HTTP_Handler(srv))
	r.DELETE("/api/v1/Org/Destroy", _SrvOrg_Destroy0_HTTP_Handler(srv))
}

func _SrvOrg_GetById0_HTTP_Handler(srv SrvOrgHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.OrgIdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvOrgGetById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetById(ctx, req.(*resources.OrgIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.Org)
		return ctx.Result(200, reply)
	}
}

func _SrvOrg_List0_HTTP_Handler(srv SrvOrgHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.OrgListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvOrgList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*resources.OrgListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.OrgListResp)
		return ctx.Result(200, reply)
	}
}

func _SrvOrg_Create0_HTTP_Handler(srv SrvOrgHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.OrgSaveReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvOrgCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*resources.OrgSaveReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.Org)
		return ctx.Result(200, reply)
	}
}

func _SrvOrg_Update0_HTTP_Handler(srv SrvOrgHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.OrgSaveReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvOrgUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*resources.OrgSaveReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.Org)
		return ctx.Result(200, reply)
	}
}

func _SrvOrg_Delete0_HTTP_Handler(srv SrvOrgHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.OrgIdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvOrgDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*resources.OrgIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.OrgProcessResult)
		return ctx.Result(200, reply)
	}
}

func _SrvOrg_Destroy0_HTTP_Handler(srv SrvOrgHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.OrgIdsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvOrgDestroy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Destroy(ctx, req.(*resources.OrgIdsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.OrgProcessResult)
		return ctx.Result(200, reply)
	}
}

type SrvOrgHTTPClient interface {
	Create(ctx context.Context, req *resources.OrgSaveReq, opts ...http.CallOption) (rsp *resources.Org, err error)
	Delete(ctx context.Context, req *resources.OrgIdReq, opts ...http.CallOption) (rsp *resources.OrgProcessResult, err error)
	Destroy(ctx context.Context, req *resources.OrgIdsReq, opts ...http.CallOption) (rsp *resources.OrgProcessResult, err error)
	GetById(ctx context.Context, req *resources.OrgIdReq, opts ...http.CallOption) (rsp *resources.Org, err error)
	List(ctx context.Context, req *resources.OrgListReq, opts ...http.CallOption) (rsp *resources.OrgListResp, err error)
	Update(ctx context.Context, req *resources.OrgSaveReq, opts ...http.CallOption) (rsp *resources.Org, err error)
}

type SrvOrgHTTPClientImpl struct {
	cc *http.Client
}

func NewSrvOrgHTTPClient(client *http.Client) SrvOrgHTTPClient {
	return &SrvOrgHTTPClientImpl{client}
}

func (c *SrvOrgHTTPClientImpl) Create(ctx context.Context, in *resources.OrgSaveReq, opts ...http.CallOption) (*resources.Org, error) {
	var out resources.Org
	pattern := "/api/v1/Org/Create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvOrgCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvOrgHTTPClientImpl) Delete(ctx context.Context, in *resources.OrgIdReq, opts ...http.CallOption) (*resources.OrgProcessResult, error) {
	var out resources.OrgProcessResult
	pattern := "/api/v1/Org/Delete"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSrvOrgDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvOrgHTTPClientImpl) Destroy(ctx context.Context, in *resources.OrgIdsReq, opts ...http.CallOption) (*resources.OrgProcessResult, error) {
	var out resources.OrgProcessResult
	pattern := "/api/v1/Org/Destroy"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSrvOrgDestroy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvOrgHTTPClientImpl) GetById(ctx context.Context, in *resources.OrgIdReq, opts ...http.CallOption) (*resources.Org, error) {
	var out resources.Org
	pattern := "/api/v1/Org/GetById"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSrvOrgGetById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvOrgHTTPClientImpl) List(ctx context.Context, in *resources.OrgListReq, opts ...http.CallOption) (*resources.OrgListResp, error) {
	var out resources.OrgListResp
	pattern := "/api/v1/Org/List"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSrvOrgList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvOrgHTTPClientImpl) Update(ctx context.Context, in *resources.OrgSaveReq, opts ...http.CallOption) (*resources.Org, error) {
	var out resources.Org
	pattern := "/api/v1/Org/Update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvOrgUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
