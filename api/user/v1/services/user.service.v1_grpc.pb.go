// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/user/v1/services/user.service.v1.proto

package userservicev1

import (
	context "context"
	resources "github.com/ikaiguang/go-srv-user/api/user/v1/resources"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SrvUserClient is the client API for SrvUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SrvUserClient interface {
	// GetById get by id
	GetById(ctx context.Context, in *resources.UserIdReq, opts ...grpc.CallOption) (*resources.User, error)
	// List list
	List(ctx context.Context, in *resources.UserListReq, opts ...grpc.CallOption) (*resources.UserListResp, error)
	// Create create
	Create(ctx context.Context, in *resources.UserSaveReq, opts ...grpc.CallOption) (*resources.User, error)
	// Update update
	Update(ctx context.Context, in *resources.UserSaveReq, opts ...grpc.CallOption) (*resources.User, error)
	// Delete delete
	Delete(ctx context.Context, in *resources.UserIdReq, opts ...grpc.CallOption) (*resources.UserProcessResult, error)
	// Destroy destroy
	Destroy(ctx context.Context, in *resources.UserIdsReq, opts ...grpc.CallOption) (*resources.UserProcessResult, error)
}

type srvUserClient struct {
	cc grpc.ClientConnInterface
}

func NewSrvUserClient(cc grpc.ClientConnInterface) SrvUserClient {
	return &srvUserClient{cc}
}

func (c *srvUserClient) GetById(ctx context.Context, in *resources.UserIdReq, opts ...grpc.CallOption) (*resources.User, error) {
	out := new(resources.User)
	err := c.cc.Invoke(ctx, "/user.api.user.userservicev1.SrvUser/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserClient) List(ctx context.Context, in *resources.UserListReq, opts ...grpc.CallOption) (*resources.UserListResp, error) {
	out := new(resources.UserListResp)
	err := c.cc.Invoke(ctx, "/user.api.user.userservicev1.SrvUser/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserClient) Create(ctx context.Context, in *resources.UserSaveReq, opts ...grpc.CallOption) (*resources.User, error) {
	out := new(resources.User)
	err := c.cc.Invoke(ctx, "/user.api.user.userservicev1.SrvUser/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserClient) Update(ctx context.Context, in *resources.UserSaveReq, opts ...grpc.CallOption) (*resources.User, error) {
	out := new(resources.User)
	err := c.cc.Invoke(ctx, "/user.api.user.userservicev1.SrvUser/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserClient) Delete(ctx context.Context, in *resources.UserIdReq, opts ...grpc.CallOption) (*resources.UserProcessResult, error) {
	out := new(resources.UserProcessResult)
	err := c.cc.Invoke(ctx, "/user.api.user.userservicev1.SrvUser/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserClient) Destroy(ctx context.Context, in *resources.UserIdsReq, opts ...grpc.CallOption) (*resources.UserProcessResult, error) {
	out := new(resources.UserProcessResult)
	err := c.cc.Invoke(ctx, "/user.api.user.userservicev1.SrvUser/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SrvUserServer is the server API for SrvUser service.
// All implementations must embed UnimplementedSrvUserServer
// for forward compatibility
type SrvUserServer interface {
	// GetById get by id
	GetById(context.Context, *resources.UserIdReq) (*resources.User, error)
	// List list
	List(context.Context, *resources.UserListReq) (*resources.UserListResp, error)
	// Create create
	Create(context.Context, *resources.UserSaveReq) (*resources.User, error)
	// Update update
	Update(context.Context, *resources.UserSaveReq) (*resources.User, error)
	// Delete delete
	Delete(context.Context, *resources.UserIdReq) (*resources.UserProcessResult, error)
	// Destroy destroy
	Destroy(context.Context, *resources.UserIdsReq) (*resources.UserProcessResult, error)
	mustEmbedUnimplementedSrvUserServer()
}

// UnimplementedSrvUserServer must be embedded to have forward compatible implementations.
type UnimplementedSrvUserServer struct {
}

func (UnimplementedSrvUserServer) GetById(context.Context, *resources.UserIdReq) (*resources.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedSrvUserServer) List(context.Context, *resources.UserListReq) (*resources.UserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSrvUserServer) Create(context.Context, *resources.UserSaveReq) (*resources.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSrvUserServer) Update(context.Context, *resources.UserSaveReq) (*resources.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSrvUserServer) Delete(context.Context, *resources.UserIdReq) (*resources.UserProcessResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSrvUserServer) Destroy(context.Context, *resources.UserIdsReq) (*resources.UserProcessResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedSrvUserServer) mustEmbedUnimplementedSrvUserServer() {}

// UnsafeSrvUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SrvUserServer will
// result in compilation errors.
type UnsafeSrvUserServer interface {
	mustEmbedUnimplementedSrvUserServer()
}

func RegisterSrvUserServer(s grpc.ServiceRegistrar, srv SrvUserServer) {
	s.RegisterService(&SrvUser_ServiceDesc, srv)
}

func _SrvUser_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.api.user.userservicev1.SrvUser/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserServer).GetById(ctx, req.(*resources.UserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUser_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.api.user.userservicev1.SrvUser/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserServer).List(ctx, req.(*resources.UserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUser_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UserSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.api.user.userservicev1.SrvUser/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserServer).Create(ctx, req.(*resources.UserSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUser_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UserSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.api.user.userservicev1.SrvUser/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserServer).Update(ctx, req.(*resources.UserSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUser_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.api.user.userservicev1.SrvUser/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserServer).Delete(ctx, req.(*resources.UserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUser_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UserIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.api.user.userservicev1.SrvUser/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserServer).Destroy(ctx, req.(*resources.UserIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SrvUser_ServiceDesc is the grpc.ServiceDesc for SrvUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SrvUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.api.user.userservicev1.SrvUser",
	HandlerType: (*SrvUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetById",
			Handler:    _SrvUser_GetById_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SrvUser_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SrvUser_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SrvUser_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SrvUser_Delete_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _SrvUser_Destroy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user/v1/services/user.service.v1.proto",
}
