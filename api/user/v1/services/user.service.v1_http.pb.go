// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.2

package userservicev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	resources "github.com/ikaiguang/go-srv-user/api/user/v1/resources"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type SrvUserHTTPServer interface {
	ChangeAvatar(context.Context, *resources.ChangeAvatarRequest) (*resources.ChangeAvatarResponse, error)
	ChangeEmail(context.Context, *resources.ChangeEmailRequest) (*resources.ChangeEmailResponse, error)
	ChangeMobile(context.Context, *resources.ChangeMobileRequest) (*resources.ChangeMobileResponse, error)
	ChangeNickname(context.Context, *resources.ChangeNicknameRequest) (*resources.ChangeNicknameResponse, error)
	ChangePassword(context.Context, *resources.ChangePasswordRequest) (*resources.ChangePasswordResponse, error)
	ChangeSex(context.Context, *resources.ChangeSexRequest) (*resources.ChangeSexResponse, error)
	Info(context.Context, *resources.InfoRequest) (*resources.Info, error)
	Login(context.Context, *resources.LoginRequest) (*resources.LoginResponse, error)
	Register(context.Context, *resources.RegisterRequest) (*resources.RegisterResponse, error)
}

func RegisterSrvUserHTTPServer(s *http.Server, srv SrvUserHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/user/login", _SrvUser_Login0_HTTP_Handler(srv))
	r.POST("/api/v1/user/register", _SrvUser_Register0_HTTP_Handler(srv))
	r.GET("/api/v1/user/info", _SrvUser_Info0_HTTP_Handler(srv))
	r.PUT("/api/v1/user/change-password", _SrvUser_ChangePassword0_HTTP_Handler(srv))
	r.PUT("/api/v1/user/change-avatar", _SrvUser_ChangeAvatar0_HTTP_Handler(srv))
	r.PUT("/api/v1/user/change-mobile", _SrvUser_ChangeMobile0_HTTP_Handler(srv))
	r.PUT("/api/v1/user/change-email", _SrvUser_ChangeEmail0_HTTP_Handler(srv))
	r.PUT("/api/v1/user/change-nickname", _SrvUser_ChangeNickname0_HTTP_Handler(srv))
	r.PUT("/api/v1/user/change-sex", _SrvUser_ChangeSex0_HTTP_Handler(srv))
}

func _SrvUser_Login0_HTTP_Handler(srv SrvUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/user.api.config.userservicev1.SrvUser/Login")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*resources.LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.LoginResponse)
		return ctx.Result(200, reply)
	}
}

func _SrvUser_Register0_HTTP_Handler(srv SrvUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.RegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/user.api.config.userservicev1.SrvUser/Register")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*resources.RegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.RegisterResponse)
		return ctx.Result(200, reply)
	}
}

func _SrvUser_Info0_HTTP_Handler(srv SrvUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.InfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/user.api.config.userservicev1.SrvUser/Info")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Info(ctx, req.(*resources.InfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.Info)
		return ctx.Result(200, reply)
	}
}

func _SrvUser_ChangePassword0_HTTP_Handler(srv SrvUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.ChangePasswordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/user.api.config.userservicev1.SrvUser/ChangePassword")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangePassword(ctx, req.(*resources.ChangePasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.ChangePasswordResponse)
		return ctx.Result(200, reply)
	}
}

func _SrvUser_ChangeAvatar0_HTTP_Handler(srv SrvUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.ChangeAvatarRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/user.api.config.userservicev1.SrvUser/ChangeAvatar")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangeAvatar(ctx, req.(*resources.ChangeAvatarRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.ChangeAvatarResponse)
		return ctx.Result(200, reply)
	}
}

func _SrvUser_ChangeMobile0_HTTP_Handler(srv SrvUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.ChangeMobileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/user.api.config.userservicev1.SrvUser/ChangeMobile")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangeMobile(ctx, req.(*resources.ChangeMobileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.ChangeMobileResponse)
		return ctx.Result(200, reply)
	}
}

func _SrvUser_ChangeEmail0_HTTP_Handler(srv SrvUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.ChangeEmailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/user.api.config.userservicev1.SrvUser/ChangeEmail")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangeEmail(ctx, req.(*resources.ChangeEmailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.ChangeEmailResponse)
		return ctx.Result(200, reply)
	}
}

func _SrvUser_ChangeNickname0_HTTP_Handler(srv SrvUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.ChangeNicknameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/user.api.config.userservicev1.SrvUser/ChangeNickname")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangeNickname(ctx, req.(*resources.ChangeNicknameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.ChangeNicknameResponse)
		return ctx.Result(200, reply)
	}
}

func _SrvUser_ChangeSex0_HTTP_Handler(srv SrvUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.ChangeSexRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/user.api.config.userservicev1.SrvUser/ChangeSex")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangeSex(ctx, req.(*resources.ChangeSexRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.ChangeSexResponse)
		return ctx.Result(200, reply)
	}
}

type SrvUserHTTPClient interface {
	ChangeAvatar(ctx context.Context, req *resources.ChangeAvatarRequest, opts ...http.CallOption) (rsp *resources.ChangeAvatarResponse, err error)
	ChangeEmail(ctx context.Context, req *resources.ChangeEmailRequest, opts ...http.CallOption) (rsp *resources.ChangeEmailResponse, err error)
	ChangeMobile(ctx context.Context, req *resources.ChangeMobileRequest, opts ...http.CallOption) (rsp *resources.ChangeMobileResponse, err error)
	ChangeNickname(ctx context.Context, req *resources.ChangeNicknameRequest, opts ...http.CallOption) (rsp *resources.ChangeNicknameResponse, err error)
	ChangePassword(ctx context.Context, req *resources.ChangePasswordRequest, opts ...http.CallOption) (rsp *resources.ChangePasswordResponse, err error)
	ChangeSex(ctx context.Context, req *resources.ChangeSexRequest, opts ...http.CallOption) (rsp *resources.ChangeSexResponse, err error)
	Info(ctx context.Context, req *resources.InfoRequest, opts ...http.CallOption) (rsp *resources.Info, err error)
	Login(ctx context.Context, req *resources.LoginRequest, opts ...http.CallOption) (rsp *resources.LoginResponse, err error)
	Register(ctx context.Context, req *resources.RegisterRequest, opts ...http.CallOption) (rsp *resources.RegisterResponse, err error)
}

type SrvUserHTTPClientImpl struct {
	cc *http.Client
}

func NewSrvUserHTTPClient(client *http.Client) SrvUserHTTPClient {
	return &SrvUserHTTPClientImpl{client}
}

func (c *SrvUserHTTPClientImpl) ChangeAvatar(ctx context.Context, in *resources.ChangeAvatarRequest, opts ...http.CallOption) (*resources.ChangeAvatarResponse, error) {
	var out resources.ChangeAvatarResponse
	pattern := "/api/v1/user/change-avatar"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/user.api.config.userservicev1.SrvUser/ChangeAvatar"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserHTTPClientImpl) ChangeEmail(ctx context.Context, in *resources.ChangeEmailRequest, opts ...http.CallOption) (*resources.ChangeEmailResponse, error) {
	var out resources.ChangeEmailResponse
	pattern := "/api/v1/user/change-email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/user.api.config.userservicev1.SrvUser/ChangeEmail"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserHTTPClientImpl) ChangeMobile(ctx context.Context, in *resources.ChangeMobileRequest, opts ...http.CallOption) (*resources.ChangeMobileResponse, error) {
	var out resources.ChangeMobileResponse
	pattern := "/api/v1/user/change-mobile"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/user.api.config.userservicev1.SrvUser/ChangeMobile"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserHTTPClientImpl) ChangeNickname(ctx context.Context, in *resources.ChangeNicknameRequest, opts ...http.CallOption) (*resources.ChangeNicknameResponse, error) {
	var out resources.ChangeNicknameResponse
	pattern := "/api/v1/user/change-nickname"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/user.api.config.userservicev1.SrvUser/ChangeNickname"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserHTTPClientImpl) ChangePassword(ctx context.Context, in *resources.ChangePasswordRequest, opts ...http.CallOption) (*resources.ChangePasswordResponse, error) {
	var out resources.ChangePasswordResponse
	pattern := "/api/v1/user/change-password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/user.api.config.userservicev1.SrvUser/ChangePassword"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserHTTPClientImpl) ChangeSex(ctx context.Context, in *resources.ChangeSexRequest, opts ...http.CallOption) (*resources.ChangeSexResponse, error) {
	var out resources.ChangeSexResponse
	pattern := "/api/v1/user/change-sex"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/user.api.config.userservicev1.SrvUser/ChangeSex"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserHTTPClientImpl) Info(ctx context.Context, in *resources.InfoRequest, opts ...http.CallOption) (*resources.Info, error) {
	var out resources.Info
	pattern := "/api/v1/user/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/user.api.config.userservicev1.SrvUser/Info"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserHTTPClientImpl) Login(ctx context.Context, in *resources.LoginRequest, opts ...http.CallOption) (*resources.LoginResponse, error) {
	var out resources.LoginResponse
	pattern := "/api/v1/user/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/user.api.config.userservicev1.SrvUser/Login"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserHTTPClientImpl) Register(ctx context.Context, in *resources.RegisterRequest, opts ...http.CallOption) (*resources.RegisterResponse, error) {
	var out resources.RegisterResponse
	pattern := "/api/v1/user/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/user.api.config.userservicev1.SrvUser/Register"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
