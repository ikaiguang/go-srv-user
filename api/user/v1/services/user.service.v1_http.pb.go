// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.3.1

package userservicev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	resources "github.com/ikaiguang/go-srv-user/api/user/v1/resources"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSrvUserCreate = "/user.api.user.userservicev1.SrvUser/Create"
const OperationSrvUserDelete = "/user.api.user.userservicev1.SrvUser/Delete"
const OperationSrvUserDestroy = "/user.api.user.userservicev1.SrvUser/Destroy"
const OperationSrvUserGetById = "/user.api.user.userservicev1.SrvUser/GetById"
const OperationSrvUserList = "/user.api.user.userservicev1.SrvUser/List"
const OperationSrvUserUpdate = "/user.api.user.userservicev1.SrvUser/Update"

type SrvUserHTTPServer interface {
	Create(context.Context, *resources.UserSaveReq) (*resources.User, error)
	Delete(context.Context, *resources.UserIdReq) (*resources.UserProcessResult, error)
	Destroy(context.Context, *resources.UserIdsReq) (*resources.UserProcessResult, error)
	GetById(context.Context, *resources.UserIdReq) (*resources.User, error)
	List(context.Context, *resources.UserListReq) (*resources.UserListResp, error)
	Update(context.Context, *resources.UserSaveReq) (*resources.User, error)
}

func RegisterSrvUserHTTPServer(s *http.Server, srv SrvUserHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/User/GetById", _SrvUser_GetById0_HTTP_Handler(srv))
	r.GET("/api/v1/User/List", _SrvUser_List0_HTTP_Handler(srv))
	r.POST("/api/v1/User/Create", _SrvUser_Create0_HTTP_Handler(srv))
	r.PUT("/api/v1/User/Update", _SrvUser_Update0_HTTP_Handler(srv))
	r.DELETE("/api/v1/User/Delete", _SrvUser_Delete0_HTTP_Handler(srv))
	r.DELETE("/api/v1/User/Destroy", _SrvUser_Destroy0_HTTP_Handler(srv))
}

func _SrvUser_GetById0_HTTP_Handler(srv SrvUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.UserIdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserGetById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetById(ctx, req.(*resources.UserIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.User)
		return ctx.Result(200, reply)
	}
}

func _SrvUser_List0_HTTP_Handler(srv SrvUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.UserListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*resources.UserListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.UserListResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUser_Create0_HTTP_Handler(srv SrvUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.UserSaveReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*resources.UserSaveReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.User)
		return ctx.Result(200, reply)
	}
}

func _SrvUser_Update0_HTTP_Handler(srv SrvUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.UserSaveReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*resources.UserSaveReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.User)
		return ctx.Result(200, reply)
	}
}

func _SrvUser_Delete0_HTTP_Handler(srv SrvUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.UserIdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*resources.UserIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.UserProcessResult)
		return ctx.Result(200, reply)
	}
}

func _SrvUser_Destroy0_HTTP_Handler(srv SrvUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.UserIdsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserDestroy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Destroy(ctx, req.(*resources.UserIdsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.UserProcessResult)
		return ctx.Result(200, reply)
	}
}

type SrvUserHTTPClient interface {
	Create(ctx context.Context, req *resources.UserSaveReq, opts ...http.CallOption) (rsp *resources.User, err error)
	Delete(ctx context.Context, req *resources.UserIdReq, opts ...http.CallOption) (rsp *resources.UserProcessResult, err error)
	Destroy(ctx context.Context, req *resources.UserIdsReq, opts ...http.CallOption) (rsp *resources.UserProcessResult, err error)
	GetById(ctx context.Context, req *resources.UserIdReq, opts ...http.CallOption) (rsp *resources.User, err error)
	List(ctx context.Context, req *resources.UserListReq, opts ...http.CallOption) (rsp *resources.UserListResp, err error)
	Update(ctx context.Context, req *resources.UserSaveReq, opts ...http.CallOption) (rsp *resources.User, err error)
}

type SrvUserHTTPClientImpl struct {
	cc *http.Client
}

func NewSrvUserHTTPClient(client *http.Client) SrvUserHTTPClient {
	return &SrvUserHTTPClientImpl{client}
}

func (c *SrvUserHTTPClientImpl) Create(ctx context.Context, in *resources.UserSaveReq, opts ...http.CallOption) (*resources.User, error) {
	var out resources.User
	pattern := "/api/v1/User/Create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserHTTPClientImpl) Delete(ctx context.Context, in *resources.UserIdReq, opts ...http.CallOption) (*resources.UserProcessResult, error) {
	var out resources.UserProcessResult
	pattern := "/api/v1/User/Delete"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSrvUserDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserHTTPClientImpl) Destroy(ctx context.Context, in *resources.UserIdsReq, opts ...http.CallOption) (*resources.UserProcessResult, error) {
	var out resources.UserProcessResult
	pattern := "/api/v1/User/Destroy"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSrvUserDestroy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserHTTPClientImpl) GetById(ctx context.Context, in *resources.UserIdReq, opts ...http.CallOption) (*resources.User, error) {
	var out resources.User
	pattern := "/api/v1/User/GetById"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSrvUserGetById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserHTTPClientImpl) List(ctx context.Context, in *resources.UserListReq, opts ...http.CallOption) (*resources.UserListResp, error) {
	var out resources.UserListResp
	pattern := "/api/v1/User/List"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSrvUserList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserHTTPClientImpl) Update(ctx context.Context, in *resources.UserSaveReq, opts ...http.CallOption) (*resources.User, error) {
	var out resources.User
	pattern := "/api/v1/User/Update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
