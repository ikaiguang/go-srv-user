// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/user/v1/services/user_info.service.v1.proto

package userservicev1

import (
	context "context"
	resources "github.com/ikaiguang/go-srv-user/api/user/v1/resources"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SrvUserInfoClient is the client API for SrvUserInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SrvUserInfoClient interface {
	// ChangeAvatar 管理员修改头像
	ChangeAvatar(ctx context.Context, in *resources.ChangeAvatarReq, opts ...grpc.CallOption) (*resources.ChangeAvatarResp, error)
	// ChangeMobile 管理员修改手机号
	ChangeMobile(ctx context.Context, in *resources.ChangeMobileReq, opts ...grpc.CallOption) (*resources.ChangeMobileResp, error)
	// ChangeEmail 管理员修改邮箱
	ChangeEmail(ctx context.Context, in *resources.ChangeEmailReq, opts ...grpc.CallOption) (*resources.ChangeEmailResp, error)
	// ChangeNickname 管理员修改昵称
	ChangeNickname(ctx context.Context, in *resources.ChangeNicknameReq, opts ...grpc.CallOption) (*resources.ChangeNicknameResp, error)
	// ChangeGender 管理员修改性别
	ChangeGender(ctx context.Context, in *resources.ChangeGenderReq, opts ...grpc.CallOption) (*resources.ChangeGenderResp, error)
}

type srvUserInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewSrvUserInfoClient(cc grpc.ClientConnInterface) SrvUserInfoClient {
	return &srvUserInfoClient{cc}
}

func (c *srvUserInfoClient) ChangeAvatar(ctx context.Context, in *resources.ChangeAvatarReq, opts ...grpc.CallOption) (*resources.ChangeAvatarResp, error) {
	out := new(resources.ChangeAvatarResp)
	err := c.cc.Invoke(ctx, "/user.api.user.userservicev1.SrvUserInfo/ChangeAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserInfoClient) ChangeMobile(ctx context.Context, in *resources.ChangeMobileReq, opts ...grpc.CallOption) (*resources.ChangeMobileResp, error) {
	out := new(resources.ChangeMobileResp)
	err := c.cc.Invoke(ctx, "/user.api.user.userservicev1.SrvUserInfo/ChangeMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserInfoClient) ChangeEmail(ctx context.Context, in *resources.ChangeEmailReq, opts ...grpc.CallOption) (*resources.ChangeEmailResp, error) {
	out := new(resources.ChangeEmailResp)
	err := c.cc.Invoke(ctx, "/user.api.user.userservicev1.SrvUserInfo/ChangeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserInfoClient) ChangeNickname(ctx context.Context, in *resources.ChangeNicknameReq, opts ...grpc.CallOption) (*resources.ChangeNicknameResp, error) {
	out := new(resources.ChangeNicknameResp)
	err := c.cc.Invoke(ctx, "/user.api.user.userservicev1.SrvUserInfo/ChangeNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserInfoClient) ChangeGender(ctx context.Context, in *resources.ChangeGenderReq, opts ...grpc.CallOption) (*resources.ChangeGenderResp, error) {
	out := new(resources.ChangeGenderResp)
	err := c.cc.Invoke(ctx, "/user.api.user.userservicev1.SrvUserInfo/ChangeGender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SrvUserInfoServer is the server API for SrvUserInfo service.
// All implementations must embed UnimplementedSrvUserInfoServer
// for forward compatibility
type SrvUserInfoServer interface {
	// ChangeAvatar 管理员修改头像
	ChangeAvatar(context.Context, *resources.ChangeAvatarReq) (*resources.ChangeAvatarResp, error)
	// ChangeMobile 管理员修改手机号
	ChangeMobile(context.Context, *resources.ChangeMobileReq) (*resources.ChangeMobileResp, error)
	// ChangeEmail 管理员修改邮箱
	ChangeEmail(context.Context, *resources.ChangeEmailReq) (*resources.ChangeEmailResp, error)
	// ChangeNickname 管理员修改昵称
	ChangeNickname(context.Context, *resources.ChangeNicknameReq) (*resources.ChangeNicknameResp, error)
	// ChangeGender 管理员修改性别
	ChangeGender(context.Context, *resources.ChangeGenderReq) (*resources.ChangeGenderResp, error)
	mustEmbedUnimplementedSrvUserInfoServer()
}

// UnimplementedSrvUserInfoServer must be embedded to have forward compatible implementations.
type UnimplementedSrvUserInfoServer struct {
}

func (UnimplementedSrvUserInfoServer) ChangeAvatar(context.Context, *resources.ChangeAvatarReq) (*resources.ChangeAvatarResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAvatar not implemented")
}
func (UnimplementedSrvUserInfoServer) ChangeMobile(context.Context, *resources.ChangeMobileReq) (*resources.ChangeMobileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMobile not implemented")
}
func (UnimplementedSrvUserInfoServer) ChangeEmail(context.Context, *resources.ChangeEmailReq) (*resources.ChangeEmailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEmail not implemented")
}
func (UnimplementedSrvUserInfoServer) ChangeNickname(context.Context, *resources.ChangeNicknameReq) (*resources.ChangeNicknameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeNickname not implemented")
}
func (UnimplementedSrvUserInfoServer) ChangeGender(context.Context, *resources.ChangeGenderReq) (*resources.ChangeGenderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeGender not implemented")
}
func (UnimplementedSrvUserInfoServer) mustEmbedUnimplementedSrvUserInfoServer() {}

// UnsafeSrvUserInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SrvUserInfoServer will
// result in compilation errors.
type UnsafeSrvUserInfoServer interface {
	mustEmbedUnimplementedSrvUserInfoServer()
}

func RegisterSrvUserInfoServer(s grpc.ServiceRegistrar, srv SrvUserInfoServer) {
	s.RegisterService(&SrvUserInfo_ServiceDesc, srv)
}

func _SrvUserInfo_ChangeAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ChangeAvatarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserInfoServer).ChangeAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.api.user.userservicev1.SrvUserInfo/ChangeAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserInfoServer).ChangeAvatar(ctx, req.(*resources.ChangeAvatarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUserInfo_ChangeMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ChangeMobileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserInfoServer).ChangeMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.api.user.userservicev1.SrvUserInfo/ChangeMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserInfoServer).ChangeMobile(ctx, req.(*resources.ChangeMobileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUserInfo_ChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ChangeEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserInfoServer).ChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.api.user.userservicev1.SrvUserInfo/ChangeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserInfoServer).ChangeEmail(ctx, req.(*resources.ChangeEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUserInfo_ChangeNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ChangeNicknameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserInfoServer).ChangeNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.api.user.userservicev1.SrvUserInfo/ChangeNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserInfoServer).ChangeNickname(ctx, req.(*resources.ChangeNicknameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUserInfo_ChangeGender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ChangeGenderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserInfoServer).ChangeGender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.api.user.userservicev1.SrvUserInfo/ChangeGender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserInfoServer).ChangeGender(ctx, req.(*resources.ChangeGenderReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SrvUserInfo_ServiceDesc is the grpc.ServiceDesc for SrvUserInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SrvUserInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.api.user.userservicev1.SrvUserInfo",
	HandlerType: (*SrvUserInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangeAvatar",
			Handler:    _SrvUserInfo_ChangeAvatar_Handler,
		},
		{
			MethodName: "ChangeMobile",
			Handler:    _SrvUserInfo_ChangeMobile_Handler,
		},
		{
			MethodName: "ChangeEmail",
			Handler:    _SrvUserInfo_ChangeEmail_Handler,
		},
		{
			MethodName: "ChangeNickname",
			Handler:    _SrvUserInfo_ChangeNickname_Handler,
		},
		{
			MethodName: "ChangeGender",
			Handler:    _SrvUserInfo_ChangeGender_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user/v1/services/user_info.service.v1.proto",
}
