// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.3.1

package userservicev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	resources "github.com/ikaiguang/go-srv-user/api/user/v1/resources"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSrvUserInfoChangeAvatar = "/user.api.user.userservicev1.SrvUserInfo/ChangeAvatar"
const OperationSrvUserInfoChangeEmail = "/user.api.user.userservicev1.SrvUserInfo/ChangeEmail"
const OperationSrvUserInfoChangeGender = "/user.api.user.userservicev1.SrvUserInfo/ChangeGender"
const OperationSrvUserInfoChangeMobile = "/user.api.user.userservicev1.SrvUserInfo/ChangeMobile"
const OperationSrvUserInfoChangeNickname = "/user.api.user.userservicev1.SrvUserInfo/ChangeNickname"

type SrvUserInfoHTTPServer interface {
	ChangeAvatar(context.Context, *resources.ChangeAvatarReq) (*resources.ChangeAvatarResp, error)
	ChangeEmail(context.Context, *resources.ChangeEmailReq) (*resources.ChangeEmailResp, error)
	ChangeGender(context.Context, *resources.ChangeGenderReq) (*resources.ChangeGenderResp, error)
	ChangeMobile(context.Context, *resources.ChangeMobileReq) (*resources.ChangeMobileResp, error)
	ChangeNickname(context.Context, *resources.ChangeNicknameReq) (*resources.ChangeNicknameResp, error)
}

func RegisterSrvUserInfoHTTPServer(s *http.Server, srv SrvUserInfoHTTPServer) {
	r := s.Route("/")
	r.PUT("/api/v1/user/change-avatar", _SrvUserInfo_ChangeAvatar0_HTTP_Handler(srv))
	r.PUT("/api/v1/user/change-mobile", _SrvUserInfo_ChangeMobile0_HTTP_Handler(srv))
	r.PUT("/api/v1/user/change-email", _SrvUserInfo_ChangeEmail0_HTTP_Handler(srv))
	r.PUT("/api/v1/user/change-nickname", _SrvUserInfo_ChangeNickname0_HTTP_Handler(srv))
	r.PUT("/api/v1/user/change-gender", _SrvUserInfo_ChangeGender0_HTTP_Handler(srv))
}

func _SrvUserInfo_ChangeAvatar0_HTTP_Handler(srv SrvUserInfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.ChangeAvatarReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserInfoChangeAvatar)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangeAvatar(ctx, req.(*resources.ChangeAvatarReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.ChangeAvatarResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserInfo_ChangeMobile0_HTTP_Handler(srv SrvUserInfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.ChangeMobileReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserInfoChangeMobile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangeMobile(ctx, req.(*resources.ChangeMobileReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.ChangeMobileResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserInfo_ChangeEmail0_HTTP_Handler(srv SrvUserInfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.ChangeEmailReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserInfoChangeEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangeEmail(ctx, req.(*resources.ChangeEmailReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.ChangeEmailResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserInfo_ChangeNickname0_HTTP_Handler(srv SrvUserInfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.ChangeNicknameReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserInfoChangeNickname)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangeNickname(ctx, req.(*resources.ChangeNicknameReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.ChangeNicknameResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserInfo_ChangeGender0_HTTP_Handler(srv SrvUserInfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.ChangeGenderReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserInfoChangeGender)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangeGender(ctx, req.(*resources.ChangeGenderReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.ChangeGenderResp)
		return ctx.Result(200, reply)
	}
}

type SrvUserInfoHTTPClient interface {
	ChangeAvatar(ctx context.Context, req *resources.ChangeAvatarReq, opts ...http.CallOption) (rsp *resources.ChangeAvatarResp, err error)
	ChangeEmail(ctx context.Context, req *resources.ChangeEmailReq, opts ...http.CallOption) (rsp *resources.ChangeEmailResp, err error)
	ChangeGender(ctx context.Context, req *resources.ChangeGenderReq, opts ...http.CallOption) (rsp *resources.ChangeGenderResp, err error)
	ChangeMobile(ctx context.Context, req *resources.ChangeMobileReq, opts ...http.CallOption) (rsp *resources.ChangeMobileResp, err error)
	ChangeNickname(ctx context.Context, req *resources.ChangeNicknameReq, opts ...http.CallOption) (rsp *resources.ChangeNicknameResp, err error)
}

type SrvUserInfoHTTPClientImpl struct {
	cc *http.Client
}

func NewSrvUserInfoHTTPClient(client *http.Client) SrvUserInfoHTTPClient {
	return &SrvUserInfoHTTPClientImpl{client}
}

func (c *SrvUserInfoHTTPClientImpl) ChangeAvatar(ctx context.Context, in *resources.ChangeAvatarReq, opts ...http.CallOption) (*resources.ChangeAvatarResp, error) {
	var out resources.ChangeAvatarResp
	pattern := "/api/v1/user/change-avatar"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserInfoChangeAvatar))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserInfoHTTPClientImpl) ChangeEmail(ctx context.Context, in *resources.ChangeEmailReq, opts ...http.CallOption) (*resources.ChangeEmailResp, error) {
	var out resources.ChangeEmailResp
	pattern := "/api/v1/user/change-email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserInfoChangeEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserInfoHTTPClientImpl) ChangeGender(ctx context.Context, in *resources.ChangeGenderReq, opts ...http.CallOption) (*resources.ChangeGenderResp, error) {
	var out resources.ChangeGenderResp
	pattern := "/api/v1/user/change-gender"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserInfoChangeGender))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserInfoHTTPClientImpl) ChangeMobile(ctx context.Context, in *resources.ChangeMobileReq, opts ...http.CallOption) (*resources.ChangeMobileResp, error) {
	var out resources.ChangeMobileResp
	pattern := "/api/v1/user/change-mobile"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserInfoChangeMobile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserInfoHTTPClientImpl) ChangeNickname(ctx context.Context, in *resources.ChangeNicknameReq, opts ...http.CallOption) (*resources.ChangeNicknameResp, error) {
	var out resources.ChangeNicknameResp
	pattern := "/api/v1/user/change-nickname"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserInfoChangeNickname))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
