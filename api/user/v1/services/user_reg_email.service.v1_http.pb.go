// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.3.1

package userservicev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	resources "github.com/ikaiguang/go-srv-user/api/user/v1/resources"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSrvUserRegEmailCreate = "/user.api.user.userservicev1.SrvUserRegEmail/Create"
const OperationSrvUserRegEmailDelete = "/user.api.user.userservicev1.SrvUserRegEmail/Delete"
const OperationSrvUserRegEmailDestroy = "/user.api.user.userservicev1.SrvUserRegEmail/Destroy"
const OperationSrvUserRegEmailGetById = "/user.api.user.userservicev1.SrvUserRegEmail/GetById"
const OperationSrvUserRegEmailList = "/user.api.user.userservicev1.SrvUserRegEmail/List"
const OperationSrvUserRegEmailUpdate = "/user.api.user.userservicev1.SrvUserRegEmail/Update"

type SrvUserRegEmailHTTPServer interface {
	Create(context.Context, *resources.UserRegEmailSaveReq) (*resources.UserRegEmail, error)
	Delete(context.Context, *resources.UserRegEmailIdReq) (*resources.UserRegEmailProcessResult, error)
	Destroy(context.Context, *resources.UserRegEmailIdsReq) (*resources.UserRegEmailProcessResult, error)
	GetById(context.Context, *resources.UserRegEmailIdReq) (*resources.UserRegEmail, error)
	List(context.Context, *resources.UserRegEmailListReq) (*resources.UserRegEmailListResp, error)
	Update(context.Context, *resources.UserRegEmailSaveReq) (*resources.UserRegEmail, error)
}

func RegisterSrvUserRegEmailHTTPServer(s *http.Server, srv SrvUserRegEmailHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/UserRegEmail/GetById", _SrvUserRegEmail_GetById0_HTTP_Handler(srv))
	r.GET("/api/v1/UserRegEmail/List", _SrvUserRegEmail_List0_HTTP_Handler(srv))
	r.POST("/api/v1/UserRegEmail/Create", _SrvUserRegEmail_Create0_HTTP_Handler(srv))
	r.PUT("/api/v1/UserRegEmail/Update", _SrvUserRegEmail_Update0_HTTP_Handler(srv))
	r.DELETE("/api/v1/UserRegEmail/Delete", _SrvUserRegEmail_Delete0_HTTP_Handler(srv))
	r.DELETE("/api/v1/UserRegEmail/Destroy", _SrvUserRegEmail_Destroy0_HTTP_Handler(srv))
}

func _SrvUserRegEmail_GetById0_HTTP_Handler(srv SrvUserRegEmailHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.UserRegEmailIdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserRegEmailGetById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetById(ctx, req.(*resources.UserRegEmailIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.UserRegEmail)
		return ctx.Result(200, reply)
	}
}

func _SrvUserRegEmail_List0_HTTP_Handler(srv SrvUserRegEmailHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.UserRegEmailListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserRegEmailList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*resources.UserRegEmailListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.UserRegEmailListResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserRegEmail_Create0_HTTP_Handler(srv SrvUserRegEmailHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.UserRegEmailSaveReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserRegEmailCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*resources.UserRegEmailSaveReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.UserRegEmail)
		return ctx.Result(200, reply)
	}
}

func _SrvUserRegEmail_Update0_HTTP_Handler(srv SrvUserRegEmailHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.UserRegEmailSaveReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserRegEmailUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*resources.UserRegEmailSaveReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.UserRegEmail)
		return ctx.Result(200, reply)
	}
}

func _SrvUserRegEmail_Delete0_HTTP_Handler(srv SrvUserRegEmailHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.UserRegEmailIdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserRegEmailDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*resources.UserRegEmailIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.UserRegEmailProcessResult)
		return ctx.Result(200, reply)
	}
}

func _SrvUserRegEmail_Destroy0_HTTP_Handler(srv SrvUserRegEmailHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.UserRegEmailIdsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserRegEmailDestroy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Destroy(ctx, req.(*resources.UserRegEmailIdsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.UserRegEmailProcessResult)
		return ctx.Result(200, reply)
	}
}

type SrvUserRegEmailHTTPClient interface {
	Create(ctx context.Context, req *resources.UserRegEmailSaveReq, opts ...http.CallOption) (rsp *resources.UserRegEmail, err error)
	Delete(ctx context.Context, req *resources.UserRegEmailIdReq, opts ...http.CallOption) (rsp *resources.UserRegEmailProcessResult, err error)
	Destroy(ctx context.Context, req *resources.UserRegEmailIdsReq, opts ...http.CallOption) (rsp *resources.UserRegEmailProcessResult, err error)
	GetById(ctx context.Context, req *resources.UserRegEmailIdReq, opts ...http.CallOption) (rsp *resources.UserRegEmail, err error)
	List(ctx context.Context, req *resources.UserRegEmailListReq, opts ...http.CallOption) (rsp *resources.UserRegEmailListResp, err error)
	Update(ctx context.Context, req *resources.UserRegEmailSaveReq, opts ...http.CallOption) (rsp *resources.UserRegEmail, err error)
}

type SrvUserRegEmailHTTPClientImpl struct {
	cc *http.Client
}

func NewSrvUserRegEmailHTTPClient(client *http.Client) SrvUserRegEmailHTTPClient {
	return &SrvUserRegEmailHTTPClientImpl{client}
}

func (c *SrvUserRegEmailHTTPClientImpl) Create(ctx context.Context, in *resources.UserRegEmailSaveReq, opts ...http.CallOption) (*resources.UserRegEmail, error) {
	var out resources.UserRegEmail
	pattern := "/api/v1/UserRegEmail/Create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserRegEmailCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserRegEmailHTTPClientImpl) Delete(ctx context.Context, in *resources.UserRegEmailIdReq, opts ...http.CallOption) (*resources.UserRegEmailProcessResult, error) {
	var out resources.UserRegEmailProcessResult
	pattern := "/api/v1/UserRegEmail/Delete"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSrvUserRegEmailDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserRegEmailHTTPClientImpl) Destroy(ctx context.Context, in *resources.UserRegEmailIdsReq, opts ...http.CallOption) (*resources.UserRegEmailProcessResult, error) {
	var out resources.UserRegEmailProcessResult
	pattern := "/api/v1/UserRegEmail/Destroy"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSrvUserRegEmailDestroy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserRegEmailHTTPClientImpl) GetById(ctx context.Context, in *resources.UserRegEmailIdReq, opts ...http.CallOption) (*resources.UserRegEmail, error) {
	var out resources.UserRegEmail
	pattern := "/api/v1/UserRegEmail/GetById"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSrvUserRegEmailGetById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserRegEmailHTTPClientImpl) List(ctx context.Context, in *resources.UserRegEmailListReq, opts ...http.CallOption) (*resources.UserRegEmailListResp, error) {
	var out resources.UserRegEmailListResp
	pattern := "/api/v1/UserRegEmail/List"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSrvUserRegEmailList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserRegEmailHTTPClientImpl) Update(ctx context.Context, in *resources.UserRegEmailSaveReq, opts ...http.CallOption) (*resources.UserRegEmail, error) {
	var out resources.UserRegEmail
	pattern := "/api/v1/UserRegEmail/Update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserRegEmailUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
