// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.3.1

package userservicev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	resources "github.com/ikaiguang/go-srv-user/api/user/v1/resources"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSrvUserRegMobileCreate = "/user.api.user.userservicev1.SrvUserRegMobile/Create"
const OperationSrvUserRegMobileDelete = "/user.api.user.userservicev1.SrvUserRegMobile/Delete"
const OperationSrvUserRegMobileDestroy = "/user.api.user.userservicev1.SrvUserRegMobile/Destroy"
const OperationSrvUserRegMobileGetById = "/user.api.user.userservicev1.SrvUserRegMobile/GetById"
const OperationSrvUserRegMobileList = "/user.api.user.userservicev1.SrvUserRegMobile/List"
const OperationSrvUserRegMobileUpdate = "/user.api.user.userservicev1.SrvUserRegMobile/Update"

type SrvUserRegMobileHTTPServer interface {
	Create(context.Context, *resources.UserRegMobileSaveReq) (*resources.UserRegMobile, error)
	Delete(context.Context, *resources.UserRegMobileIdReq) (*resources.UserRegMobileProcessResult, error)
	Destroy(context.Context, *resources.UserRegMobileIdsReq) (*resources.UserRegMobileProcessResult, error)
	GetById(context.Context, *resources.UserRegMobileIdReq) (*resources.UserRegMobile, error)
	List(context.Context, *resources.UserRegMobileListReq) (*resources.UserRegMobileListResp, error)
	Update(context.Context, *resources.UserRegMobileSaveReq) (*resources.UserRegMobile, error)
}

func RegisterSrvUserRegMobileHTTPServer(s *http.Server, srv SrvUserRegMobileHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/UserRegMobile/GetById", _SrvUserRegMobile_GetById0_HTTP_Handler(srv))
	r.GET("/api/v1/UserRegMobile/List", _SrvUserRegMobile_List0_HTTP_Handler(srv))
	r.POST("/api/v1/UserRegMobile/Create", _SrvUserRegMobile_Create0_HTTP_Handler(srv))
	r.PUT("/api/v1/UserRegMobile/Update", _SrvUserRegMobile_Update0_HTTP_Handler(srv))
	r.DELETE("/api/v1/UserRegMobile/Delete", _SrvUserRegMobile_Delete0_HTTP_Handler(srv))
	r.DELETE("/api/v1/UserRegMobile/Destroy", _SrvUserRegMobile_Destroy0_HTTP_Handler(srv))
}

func _SrvUserRegMobile_GetById0_HTTP_Handler(srv SrvUserRegMobileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.UserRegMobileIdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserRegMobileGetById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetById(ctx, req.(*resources.UserRegMobileIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.UserRegMobile)
		return ctx.Result(200, reply)
	}
}

func _SrvUserRegMobile_List0_HTTP_Handler(srv SrvUserRegMobileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.UserRegMobileListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserRegMobileList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*resources.UserRegMobileListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.UserRegMobileListResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserRegMobile_Create0_HTTP_Handler(srv SrvUserRegMobileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.UserRegMobileSaveReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserRegMobileCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*resources.UserRegMobileSaveReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.UserRegMobile)
		return ctx.Result(200, reply)
	}
}

func _SrvUserRegMobile_Update0_HTTP_Handler(srv SrvUserRegMobileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.UserRegMobileSaveReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserRegMobileUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*resources.UserRegMobileSaveReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.UserRegMobile)
		return ctx.Result(200, reply)
	}
}

func _SrvUserRegMobile_Delete0_HTTP_Handler(srv SrvUserRegMobileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.UserRegMobileIdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserRegMobileDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*resources.UserRegMobileIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.UserRegMobileProcessResult)
		return ctx.Result(200, reply)
	}
}

func _SrvUserRegMobile_Destroy0_HTTP_Handler(srv SrvUserRegMobileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.UserRegMobileIdsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserRegMobileDestroy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Destroy(ctx, req.(*resources.UserRegMobileIdsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.UserRegMobileProcessResult)
		return ctx.Result(200, reply)
	}
}

type SrvUserRegMobileHTTPClient interface {
	Create(ctx context.Context, req *resources.UserRegMobileSaveReq, opts ...http.CallOption) (rsp *resources.UserRegMobile, err error)
	Delete(ctx context.Context, req *resources.UserRegMobileIdReq, opts ...http.CallOption) (rsp *resources.UserRegMobileProcessResult, err error)
	Destroy(ctx context.Context, req *resources.UserRegMobileIdsReq, opts ...http.CallOption) (rsp *resources.UserRegMobileProcessResult, err error)
	GetById(ctx context.Context, req *resources.UserRegMobileIdReq, opts ...http.CallOption) (rsp *resources.UserRegMobile, err error)
	List(ctx context.Context, req *resources.UserRegMobileListReq, opts ...http.CallOption) (rsp *resources.UserRegMobileListResp, err error)
	Update(ctx context.Context, req *resources.UserRegMobileSaveReq, opts ...http.CallOption) (rsp *resources.UserRegMobile, err error)
}

type SrvUserRegMobileHTTPClientImpl struct {
	cc *http.Client
}

func NewSrvUserRegMobileHTTPClient(client *http.Client) SrvUserRegMobileHTTPClient {
	return &SrvUserRegMobileHTTPClientImpl{client}
}

func (c *SrvUserRegMobileHTTPClientImpl) Create(ctx context.Context, in *resources.UserRegMobileSaveReq, opts ...http.CallOption) (*resources.UserRegMobile, error) {
	var out resources.UserRegMobile
	pattern := "/api/v1/UserRegMobile/Create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserRegMobileCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserRegMobileHTTPClientImpl) Delete(ctx context.Context, in *resources.UserRegMobileIdReq, opts ...http.CallOption) (*resources.UserRegMobileProcessResult, error) {
	var out resources.UserRegMobileProcessResult
	pattern := "/api/v1/UserRegMobile/Delete"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSrvUserRegMobileDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserRegMobileHTTPClientImpl) Destroy(ctx context.Context, in *resources.UserRegMobileIdsReq, opts ...http.CallOption) (*resources.UserRegMobileProcessResult, error) {
	var out resources.UserRegMobileProcessResult
	pattern := "/api/v1/UserRegMobile/Destroy"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSrvUserRegMobileDestroy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserRegMobileHTTPClientImpl) GetById(ctx context.Context, in *resources.UserRegMobileIdReq, opts ...http.CallOption) (*resources.UserRegMobile, error) {
	var out resources.UserRegMobile
	pattern := "/api/v1/UserRegMobile/GetById"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSrvUserRegMobileGetById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserRegMobileHTTPClientImpl) List(ctx context.Context, in *resources.UserRegMobileListReq, opts ...http.CallOption) (*resources.UserRegMobileListResp, error) {
	var out resources.UserRegMobileListResp
	pattern := "/api/v1/UserRegMobile/List"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSrvUserRegMobileList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserRegMobileHTTPClientImpl) Update(ctx context.Context, in *resources.UserRegMobileSaveReq, opts ...http.CallOption) (*resources.UserRegMobile, error) {
	var out resources.UserRegMobile
	pattern := "/api/v1/UserRegMobile/Update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserRegMobileUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
