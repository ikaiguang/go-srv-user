// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.3.1

package userservicev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	resources "github.com/ikaiguang/go-srv-user/api/user/v1/resources"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSrvUserRegUsernameCreate = "/user.api.user.userservicev1.SrvUserRegUsername/Create"
const OperationSrvUserRegUsernameDelete = "/user.api.user.userservicev1.SrvUserRegUsername/Delete"
const OperationSrvUserRegUsernameDestroy = "/user.api.user.userservicev1.SrvUserRegUsername/Destroy"
const OperationSrvUserRegUsernameGetById = "/user.api.user.userservicev1.SrvUserRegUsername/GetById"
const OperationSrvUserRegUsernameList = "/user.api.user.userservicev1.SrvUserRegUsername/List"
const OperationSrvUserRegUsernameUpdate = "/user.api.user.userservicev1.SrvUserRegUsername/Update"

type SrvUserRegUsernameHTTPServer interface {
	Create(context.Context, *resources.UserRegUsernameSaveReq) (*resources.UserRegUsername, error)
	Delete(context.Context, *resources.UserRegUsernameIdReq) (*resources.UserRegUsernameProcessResult, error)
	Destroy(context.Context, *resources.UserRegUsernameIdsReq) (*resources.UserRegUsernameProcessResult, error)
	GetById(context.Context, *resources.UserRegUsernameIdReq) (*resources.UserRegUsername, error)
	List(context.Context, *resources.UserRegUsernameListReq) (*resources.UserRegUsernameListResp, error)
	Update(context.Context, *resources.UserRegUsernameSaveReq) (*resources.UserRegUsername, error)
}

func RegisterSrvUserRegUsernameHTTPServer(s *http.Server, srv SrvUserRegUsernameHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/UserRegUsername/GetById", _SrvUserRegUsername_GetById0_HTTP_Handler(srv))
	r.GET("/api/v1/UserRegUsername/List", _SrvUserRegUsername_List0_HTTP_Handler(srv))
	r.POST("/api/v1/UserRegUsername/Create", _SrvUserRegUsername_Create0_HTTP_Handler(srv))
	r.PUT("/api/v1/UserRegUsername/Update", _SrvUserRegUsername_Update0_HTTP_Handler(srv))
	r.DELETE("/api/v1/UserRegUsername/Delete", _SrvUserRegUsername_Delete0_HTTP_Handler(srv))
	r.DELETE("/api/v1/UserRegUsername/Destroy", _SrvUserRegUsername_Destroy0_HTTP_Handler(srv))
}

func _SrvUserRegUsername_GetById0_HTTP_Handler(srv SrvUserRegUsernameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.UserRegUsernameIdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserRegUsernameGetById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetById(ctx, req.(*resources.UserRegUsernameIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.UserRegUsername)
		return ctx.Result(200, reply)
	}
}

func _SrvUserRegUsername_List0_HTTP_Handler(srv SrvUserRegUsernameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.UserRegUsernameListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserRegUsernameList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*resources.UserRegUsernameListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.UserRegUsernameListResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserRegUsername_Create0_HTTP_Handler(srv SrvUserRegUsernameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.UserRegUsernameSaveReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserRegUsernameCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*resources.UserRegUsernameSaveReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.UserRegUsername)
		return ctx.Result(200, reply)
	}
}

func _SrvUserRegUsername_Update0_HTTP_Handler(srv SrvUserRegUsernameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.UserRegUsernameSaveReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserRegUsernameUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*resources.UserRegUsernameSaveReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.UserRegUsername)
		return ctx.Result(200, reply)
	}
}

func _SrvUserRegUsername_Delete0_HTTP_Handler(srv SrvUserRegUsernameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.UserRegUsernameIdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserRegUsernameDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*resources.UserRegUsernameIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.UserRegUsernameProcessResult)
		return ctx.Result(200, reply)
	}
}

func _SrvUserRegUsername_Destroy0_HTTP_Handler(srv SrvUserRegUsernameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.UserRegUsernameIdsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserRegUsernameDestroy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Destroy(ctx, req.(*resources.UserRegUsernameIdsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.UserRegUsernameProcessResult)
		return ctx.Result(200, reply)
	}
}

type SrvUserRegUsernameHTTPClient interface {
	Create(ctx context.Context, req *resources.UserRegUsernameSaveReq, opts ...http.CallOption) (rsp *resources.UserRegUsername, err error)
	Delete(ctx context.Context, req *resources.UserRegUsernameIdReq, opts ...http.CallOption) (rsp *resources.UserRegUsernameProcessResult, err error)
	Destroy(ctx context.Context, req *resources.UserRegUsernameIdsReq, opts ...http.CallOption) (rsp *resources.UserRegUsernameProcessResult, err error)
	GetById(ctx context.Context, req *resources.UserRegUsernameIdReq, opts ...http.CallOption) (rsp *resources.UserRegUsername, err error)
	List(ctx context.Context, req *resources.UserRegUsernameListReq, opts ...http.CallOption) (rsp *resources.UserRegUsernameListResp, err error)
	Update(ctx context.Context, req *resources.UserRegUsernameSaveReq, opts ...http.CallOption) (rsp *resources.UserRegUsername, err error)
}

type SrvUserRegUsernameHTTPClientImpl struct {
	cc *http.Client
}

func NewSrvUserRegUsernameHTTPClient(client *http.Client) SrvUserRegUsernameHTTPClient {
	return &SrvUserRegUsernameHTTPClientImpl{client}
}

func (c *SrvUserRegUsernameHTTPClientImpl) Create(ctx context.Context, in *resources.UserRegUsernameSaveReq, opts ...http.CallOption) (*resources.UserRegUsername, error) {
	var out resources.UserRegUsername
	pattern := "/api/v1/UserRegUsername/Create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserRegUsernameCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserRegUsernameHTTPClientImpl) Delete(ctx context.Context, in *resources.UserRegUsernameIdReq, opts ...http.CallOption) (*resources.UserRegUsernameProcessResult, error) {
	var out resources.UserRegUsernameProcessResult
	pattern := "/api/v1/UserRegUsername/Delete"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSrvUserRegUsernameDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserRegUsernameHTTPClientImpl) Destroy(ctx context.Context, in *resources.UserRegUsernameIdsReq, opts ...http.CallOption) (*resources.UserRegUsernameProcessResult, error) {
	var out resources.UserRegUsernameProcessResult
	pattern := "/api/v1/UserRegUsername/Destroy"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSrvUserRegUsernameDestroy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserRegUsernameHTTPClientImpl) GetById(ctx context.Context, in *resources.UserRegUsernameIdReq, opts ...http.CallOption) (*resources.UserRegUsername, error) {
	var out resources.UserRegUsername
	pattern := "/api/v1/UserRegUsername/GetById"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSrvUserRegUsernameGetById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserRegUsernameHTTPClientImpl) List(ctx context.Context, in *resources.UserRegUsernameListReq, opts ...http.CallOption) (*resources.UserRegUsernameListResp, error) {
	var out resources.UserRegUsernameListResp
	pattern := "/api/v1/UserRegUsername/List"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSrvUserRegUsernameList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvUserRegUsernameHTTPClientImpl) Update(ctx context.Context, in *resources.UserRegUsernameSaveReq, opts ...http.CallOption) (*resources.UserRegUsername, error) {
	var out resources.UserRegUsername
	pattern := "/api/v1/UserRegUsername/Update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserRegUsernameUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
